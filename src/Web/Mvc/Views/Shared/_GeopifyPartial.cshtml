<form method="post" asp-controller="product" asp-area="product" asp-action="index"
      class="autocomplete-form d-flex justify-content-center align-items-center">
      <div asp-validation-summary="ModelOnly" class="text-danger"></div>
      <div class="autocomplete-container" id="autocomplete-container"></div>
      <button type="submit" class="autocoplete-btn btn btn-primary btn-lg">
            Search
      </button>
</form>


<script>

      /* 
       The addressAutocomplete takes as parameters:
   - a container element (div)
   - callback to notify about address selection
 */
      function addressAutocomplete(containerElement, callback, options) {
            // create input element
            // create input element
            var inputElement = document.createElement("input");
            inputElement.setAttribute("type", "text");
            inputElement.setAttribute("name", "Location")
            inputElement.setAttribute("placeholder", options.placeholder);
            containerElement.appendChild(inputElement);


            // add input field clear button
            var clearButton = document.createElement("div");
            clearButton.classList.add("clear-button");
            addIcon(clearButton);
            clearButton.addEventListener("click", (e) => {
                  e.stopPropagation();
                  inputElement.value = '';
                  callback(null);
                  clearButton.classList.remove("visible");
                  closeDropDownList();
            });
            inputElement.parentNode.appendChild(clearButton);

            /* Current autocomplete items data (GeoJSON.Feature) */
            var currentItems;

            /* Active request promise reject function. To be able to cancel the promise when a new request comes */
            var currentPromiseReject;

            /* Execute a function when someone writes in the text field: */
            inputElement.addEventListener("input", function (e) {
                  var currentValue = this.value;

                  /* Close any already open dropdown list */
                  closeDropDownList();

                  // Cancel previous request promise
                  if (currentPromiseReject) {
                        currentPromiseReject({
                              canceled: true
                        });
                  }

                  if (!currentValue) {
                        clearButton.classList.remove("visible");
                        return false;
                  }

                  // Show clearButton when there is a text
                  clearButton.classList.add("visible");

                  /* Create a new promise and send geocoding request */
                  var promise = new Promise((resolve, reject) => {
                        currentPromiseReject = reject;

                        var apiKey = "d756c24699614cb9ab6307bb9891a6a3";
                        var url = `https://api.geoapify.com/v1/geocode/autocomplete?text=${encodeURIComponent(currentValue)}&limit=5&type=city&apiKey=${apiKey}`;

                        fetch(url)
                              .then(response => {
                                    // check if the call was successful
                                    if (response.ok) {
                                          response.json().then(data => resolve(data));
                                    } else {
                                          response.json().then(data => reject(data));
                                    }
                              });
                  });

                  promise.then((data) => {
                        currentItems = data.features;

                        /*create a DIV element that will contain the items (values):*/
                        var autocompleteItemsElement = document.createElement("div");
                        autocompleteItemsElement.setAttribute("class", "autocomplete-items");
                        containerElement.appendChild(autocompleteItemsElement);

                        /* For each item in the results */
                        data.features.forEach((feature, index) => {
                              console.log(feature);
                              /* Create a DIV element for each element: */
                              var itemElement = document.createElement("div");
                              /* Set formatted address as item value */
                              itemElement.innerHTML = feature.properties.formatted;

                              /* Set the value for the autocomplete text field and notify: */
                              itemElement.addEventListener("click", function (e) {
                                    inputElement.value = currentItems[index].properties.formatted;

                                    callback(currentItems[index]);

                                    /* Close the list of autocompleted values: */
                                    closeDropDownList();
                              });

                              autocompleteItemsElement.appendChild(itemElement);
                        });
                  }, (err) => {
                        if (!err.canceled) {
                              console.log(err);
                        }
                  });
            });


            function closeDropDownList() {
                  var autocompleteItemsElement = containerElement.querySelector(".autocomplete-items");
                  if (autocompleteItemsElement) {
                        containerElement.removeChild(autocompleteItemsElement);
                  }
            }

            function addIcon(buttonElement) {
                  var svgElement = document.createElementNS("http://www.w3.org/2000/svg", 'svg');
                  svgElement.setAttribute('viewBox', "0 0 24 24");
                  svgElement.setAttribute('height', "24");

                  var iconElement = document.createElementNS("http://www.w3.org/2000/svg", 'path');
                  iconElement.setAttribute("d", "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z");
                  iconElement.setAttribute('fill', 'currentColor');
                  svgElement.appendChild(iconElement);
                  buttonElement.appendChild(svgElement);
            }

      }


      addressAutocomplete(document.getElementById("autocomplete-container"), (data) => {
            console.log("Selected option: ");
            console.log(data);
      }, {
            placeholder: "Enter a city here"
      });


</script>
